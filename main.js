/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_electron = require("electron");
var path = __toESM(require("path"));
var os = __toESM(require("os"));
var DEFAULT_SETTINGS = {
  rootFolder: "~/",
  findString: "",
  replaceString: ""
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new RootFolderURISettingTab(this.app, this));
    this.addCommand({
      id: "add-root-folder-uri",
      name: "Add a root folder URI.",
      callback: () => {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (view === null) {
          return;
        }
        const document = view.editor;
        setTimeout(() => {
          const files = import_electron.remote.dialog.showOpenDialogSync({ properties: ["openFile", "openDirectory", "multiSelections"] });
          if (files === void 0) {
            return;
          }
          for (const file of files) {
            const relative2 = path.relative(this.settings.rootFolder.replace(/^~(?=$|\/|\\)/, os.homedir()), file).replace(this.settings.findString, this.settings.replaceString);
            const line = document.getCursor();
            document.replaceRange(`[${path.basename(file)}](obsidian://from-root?to=${encodeURI(relative2)})`, line, line);
          }
        }, 50);
      }
    });
    this.registerObsidianProtocolHandler("from-root", async (payload) => {
      const parameters = payload;
      const file = path.resolve(this.settings.rootFolder.replace(/^~(?=$|\/|\\)/, os.homedir()), decodeURI(parameters.to));
      import_electron.shell.openPath(file).then((err) => err === "" || new import_obsidian.Notice(err));
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var RootFolderURISettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Root Folder URI Settings" });
    new import_obsidian.Setting(containerEl).setName("Root Folder").setDesc("The folder from which the `ob-root` URI schema rooted.").addText((text) => text.setPlaceholder("The folder path should end with a slash (/).").setValue(this.plugin.settings.rootFolder).onChange(async (value) => {
      this.plugin.settings.rootFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Find String").setDesc("The string (or RegExp) to search in the relative path.").addText((text) => text.setValue(this.plugin.settings.findString).onChange(async (value) => {
      this.plugin.settings.findString = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Replace String").setDesc("The string to replace in the relative path.").addText((text) => text.setValue(this.plugin.settings.replaceString).onChange(async (value) => {
      this.plugin.settings.replaceString = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
